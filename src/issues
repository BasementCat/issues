#!/usr/bin/python

import hashlib, json, yaml, os, subprocess, sys, time, re
import misc

class Model(object):
	def __init__(self, **kwargs):
		self._data={}
		for k,v in kwargs.items():
			setattr(self, k, v)
		for k in self._fields:
			if k not in self._data:
				self._data[k]=None

	def __setattr__(self, k, v):
		if k in self._fields:
			self._data[k]=v
		else:
			super(Model, self).__setattr__(k, v)

	def __getattr__(self, k):
		if k in self._fields:
			return self._data[k]
		return super(Model, self).__getattr__(k)

	def _asDict(self):
		out={}
		for k in self._fields:
			v=getattr(self, k)
			out[k]=v._asDict() if isinstance(v, Model) else v
		return out

	@staticmethod
	def _dataType(fname, override=None):
		if not override:
			if re.search(r"\.ya?ml$", fname, re.I):
				return "yaml"
			elif re.search(r"\.js(on)?$", fname, re.I):
				return "json"
			else:
				raise Exception("Cannot determine filetype from '%s'"%(fname,))
		else:
			return override

	def save(self, toFile, asType=None):
		with open(toFile, "w") as fp:
			mod=getattr(sys.modules[__name__], self._dataType(toFile, asType))
			if mod is yaml:
				return mod.dump(self._asDict(), fp, default_flow_style=False, indent=4)
			else:
				return mod.dump(self._asDict(), fp, indent=4)

	@classmethod
	def load(self, fromFile, asType=None):
		with open(fromFile, "r") as fp:
			d=getattr(sys.modules[__name__], self._dataType(fromFile, asType)).load(fp)
			return self(**d)

class Config(Model):
	_fields=("identity", "editor")

	@staticmethod
	def getGitIdentity():
		try:
			userName=subprocess.check_output(['git', 'config', '--global', '--get', 'user.name']).strip()
			userEmail=subprocess.check_output(['git', 'config', '--global', '--get', 'user.email']).strip()
			identity="%s <%s>"%(userName, userEmail)
			return identity
		except:
			return ""

	@staticmethod
	def getManualIdentity():
		name=raw_input("Your name: ")
		email=raw_input("Your email: ")
		return "%s <%s>"%(name, email)

	@staticmethod
	def getEditor():
		if os.environ.has_key('EDITOR'):
			return os.environ['EDITOR']
		else:
			try:
				return subprocess.check_output(['git', 'config', '--global', '--get', 'core.editor']).strip()
			except:
				return 'vi'

issueDir='./.issues/'
issueConfig=os.path.expanduser('~/.issues-config.yml')
try:
	_config=Config.load(issueConfig)
except:
	_config=Config()
	_config.save(issueConfig)

def setup():
	global _config
	print "Step 1: Identity"
	print "Git identity: \"%s\""%(Config.getGitIdentity(),)
	print "Your current identity: \"%s\""%(_config.identity,)
	identity=raw_input("Change identity? [Blank to use current, \"git\" or \"manual\"]: ")
	if identity=="git":
		_config.identity=Config.getGitIdentity()
	elif identity=="manual":
		_config.identity=Config.getManualIdentity()
	else:
		print "Identity not changed."

	print "Step 2: Editor"
	print "System editor: \"%s\""%(Config.getEditor(),)
	print "Your editor: \"%s\""%(_config.editor,)
	ed=raw_input("Use the system editor? [y/N]: ")
	if ed=="y":
		_config.editor=Config.getEditor()
	else:
		print "To change your editor, run \"EDITOR=/your/editor; %s setup\""%(sys.argv[0],)
	_config.save(issueConfig)

setup()
sys.exit(0)

if not os.path.exists(issueDir):
	try:
		os.makedirs(issueDir)
	except Exception as e:
		sys.stderr.write("Could not create issues directory %s: %s\n"%(issueDir, str(e)))
		sys.exit(1)

class Issue(object):
	def __init__(self, title="", description="", author="", priority=0, assignedTo="", tags=[]):
		self.title=title
		self.description=description
		self.author=identity if author is None else author
		self.priority=int(priority)
		self.assignedTo=identity if assignedTo is None else assignedTo
		self.tags=tags
		self.created=misc.time_utc()
		self.updated=misc.time_utc()
		self.id=None
	
	def genid(self):
		while True:
			self.id=hashlib.sha224(identity+str(time.clock())).hexdigest()
			if not os.path.exists(issueDir+self.id):
				break
	
	def save(self):
		if self.id is None:
			self.genid()
		self.updated=misc.time_utc()
		try:
			with open(issueDir+self.id, 'w') as f:
				json.dump(self.__dict__, f, indent=4)
			return True
		except Exception as e:
			sys.stderr.write("Cannot save to %s: %s\n"%(issueDir+self.id, str(e)))
			return False
	
	@classmethod
	def load(self, idno):
		new=Issue()
		with open(issueDir+idno, 'r') as f:
			new.__dict__=json.load(f)
		new.priority=int(new.priority)
		return new

	def edit(self):
		import random, re
		tempname='/tmp/issues-%08x'%(random.getrandbits(32),)
		with open(tempname, 'w') as f:
			f.write("""%s

%s

Author: %s
Assignee: %s
Priority: %d
Tags: %s

#Lines beginning with # are ignored.
#The first line of your report is the title.
#All following lines are the description of the report."""%(self.title, self.description, self.author, self.assignedTo, self.priority, ", ".join(self.tags)))
		subprocess.call([editor, tempname])
		with open(tempname, 'r') as f:
			haveTitle=False
			haveDesc=False
			curDesc=""
			for line in f.readlines():
				if line[0]=="#": continue
				match=re.match(r"^(Author|Assignee|Priority|Tags):(\s+)?(.*)$", line)
				if match:
					haveDesc=True
					k, v=match.group(1, 3)
					if k=="Assignee":
						k="assignedTo"
					else:
						k=k.lower()
					if k in ("author", "assignedTo"):
						pass #later we'll do automatic checking so you don't have to type out the full assignee
					elif k=="Priority":
						v=int(v)
					elif k=="tags":
						v=re.split(r"[\s,]+", v)
					setattr(self, k, v)
				elif not haveTitle:
					if not line.strip("\r\n"): continue
					self.title=line.strip("\r\n")
					haveTitle=True
				elif not haveDesc:
					if not line.strip("\r\n") and curDesc=="": continue
					curDesc+=line
			self.description=curDesc.rstrip("\r\n")
		os.unlink(tempname)
	
	def __str__(self):
		return "Issue#%s"%(self.id,)
	
	def formatted(self):
		"""self.title=title
		self.description=description
		self.author=identity if author is None else author
		self.priority=int(priority)
		self.assignedTo=identity if assignedTo is None else assignedTo
		self.tags=tags
		self.created=misc.time_utc()
		self.updated=misc.time_utc()
		self.id=None"""
		return "\n".join([
			misc.align("|c<.|<.", "[Pri: %d] "%(self.priority,), self.title),
			misc.align("|c<.|<.|c<.|<.|c<.|<.",
				"By: ", self.author,
				"Reported: ", time.strftime("%Y-%m-%d %I:%M %p", time.localtime(misc.time_local(self.created))),
				"Updated: ", time.strftime("%Y-%m-%d %I:%M %p", time.localtime(misc.time_local(self.updated)))
			),
			misc.align("|c<.|c<.|>.",
				"Assignee: ", self.assignedTo,
				"["+", ".join(self.tags)+"]"
			),
			"",
			self.description
			])

i=Issue.load('e8a2193dcf68d85f76ab56264d28580662179a1fd7e27ab187780f42')
print misc.align("|-")
print i.formatted()
print misc.align("|_")